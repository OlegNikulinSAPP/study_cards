[
  {
    "front": "Что такое SQL?",
    "back": "SQL (Structured Query Language) – язык программирования для работы с реляционными базами данных. Позволяет:\n\nСоздавать и изменять структуру БД (DDL – Data Definition Language)\nУправлять данными (DML – Data Manipulation Language)\nКонтролировать доступ (DCL – Data Control Language)\nУправлять транзакциями (TCL – Transaction Control Language)"
  },
  {
    "front": "Отличие SQL от MySQL?",
    "back": "SQL – стандартизированный язык запросов\nMySQL – конкретная СУБД (система управления базами данных), реализующая стандарт SQL"
  },
  {
    "front": "Что такое PRIMARY KEY?",
    "back": "Первичный ключ – столбец (или набор столбцов), уникально идентифицирующий каждую строку в таблице:\n\nГарантирует уникальность значений\nНе допускает NULL значений\nАвтоматически создает кластеризованный индекс (в большинстве СУБД)\nCREATE TABLE Users (\n  id INT PRIMARY KEY,\n  name VARCHAR(50)\n);"
  },
  {
    "front": "Для чего нужен FOREIGN KEY?",
    "back": "Внешний ключ обеспечивает ссылочную целостность между таблицами:\n\nСвязывает поле в дочерней таблице с PRIMARY KEY в родительской\nПредотвращает удаление связанных данных\nОбеспечивает целостность отношений\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  user_id INT,\n  FOREIGN KEY (user_id) REFERENCES Users(id)\n);"
  },
  {
    "front": "Разница между CHAR и VARCHAR?",
    "back": "CHAR – фиксированная длина (дополняется пробелами до указанного размера)\nVARCHAR – переменная длина (хранит только фактическое количество символов)\nПример:\n\nCHAR(10) для ‘SQL’ - ‘SQL_______’ (7 пробелов)\nVARCHAR(10) для ‘SQL’ - ‘SQL’ (3 символа)"
  },
  {
    "front": "Как правильно проверять NULL значения в SQL?",
    "back": "Для проверки NULL используется оператор IS NULL вместо сравнения с = NULL:\n-- Правильно:\nSELECT * FROM Employees WHERE phone IS NULL;\n-- Неправильно:\nSELECT * FROM Employees WHERE phone = NULL;"
  },
  {
    "front": "logging.basicConfig(level=logging.DEBUG)",
    "back": "Устанавливает уровень логирования на DEBUG - это означает, что будут записываться ВСЕ сообщения, включая самые подробные отладочные."
  },
  {
    "front": "Logger = logging.getLogger('CardApp')",
    "back": "Создает специальный объект для логирования с именем 'CardApp', который можно использовать во всем приложении."
  },
  {
    "front": "Config.set('graphics', 'resizable', '1')",
    "back": "(kivy) Разрешает изменение размера окна приложения пользователем."
  },
  {
    "front": "Window.fullscreen = 'auto'",
    "back": "(kivy) Устанавливает автоматический полноэкранный режим для окна приложения."
  },
  {
    "front": "Window.clearcolor = COLORS['background']",
    "back": "(kivy) Задает цвет фона всего окна приложения перед отрисовкой любого контента."
  },
  {
    "front": "os.path.exists(path)",
    "back": "os.path.exists() - это функция из модуля os.path в Python, которая проверяет существование файла или директории по указанному пути."
  },
  {
    "front": "os.path.getsize(path)",
    "back": "os.path.getsize() - это функция из модуля os.path в Python, которая возвращает размер файла в байтах."
  },
  {
    "front": "Контекстный менеджер with в Python",
    "back": "Контекстный менеджер with в Python - это специальная конструкция, которая обеспечивает правильное управление ресурсами (файлами, сетевыми соединениями, транзакциями и т.д.).\n\nОсновная идея:\nКонтекстный менеджер гарантирует, что ресурсы будут правильно:\n\nИнициализированы при входе в блок\n\nОсвобождены при выходе из блока (даже при возникновении ошибок)"
  },
  {
    "front": "cards = json.load(f)",
    "back": "Читает и преобразует JSON-данные из файлового объекта f в структуры данных Python.\n\nИсходные данные (в файле cards.json):\n[\n  {\n    \"front\": \"Что такое Python?\",\n    \"back\": \"Язык программирования\"\n  },\n  {\n    \"front\": \"Что такое JSON?\",\n    \"back\": \"Формат обмена данными\"\n  }\n]\n\nПосле выполнения json.load(f):\ncards = [\n    {\n        'front': 'Что такое Python?',\n        'back': 'Язык программирования'\n    },\n    {\n        'front': 'Что такое JSON?', \n        'back': 'Формат обмена данными'\n    }\n]"
  },
  {
    "front": "Файловый объект f в выражении cards = json.load(f)",
    "back": "Файловый объект f в выражении cards = json.load(f) — это объект, который был создан при открытии файла с помощью функции open(). В Python, когда вы используете конструкцию with open(...) as f, переменная f становится файловым объектом, который предоставляет интерфейс для чтения или записи данных в файл."
  },
  {
    "front": "(MyApp) Почему в функции load_cards() возвращается пустой список [] в случаях, когда файл с карточками не существует, пуст или возникает ошибка при загрузке?",
    "back": "Возврат пустого списка [] обеспечивает единообразие интерфейса функции и предотвращает ошибки в вызывающем коде. Это гарантирует, что:\n\nВсегда возвращается корректный список - вызывающий код может безопасно выполнять операции вроде итерации for card in cards без проверки на None\n\nУпрощается обработка результатов - не нужно делать дополнительные проверки if cards is not None\n\nПредотвращаются исключения - операции вроде len(cards) или списковых включений работают корректно даже с пустым списком\n\nОтсутствие данных - нормальная ситуация - это особенно важно при первом запуске приложения, когда файла с карточками еще не существует\n\nТакой подход следует принципу \"явное лучше неявного\" - функция всегда четко возвращает список, даже если он пустой, что делает код более предсказуемым и устойчивым к ошибкам."
  },
  {
    "front": "(MyApp) Что делает выражение open(CARDS_FILE, 'r', encoding='utf-8') и зачем нужны параметры 'r' и encoding='utf-8'?",
    "back": "Это выражение открывает файл с карточками для чтения с указанием кодировки UTF-8:\n\nCARDS_FILE - путь к файлу с карточками (например, 'cards.json')\n\n'r' - режим открытия файла: чтение (read)\n\nencoding='utf-8' - кодировка файла, которая обеспечивает корректное чтение кириллицы и других специальных символов\n\nБез параметра encoding='utf-8' при чтении файла с русским текстом могли бы возникнуть ошибки кодировки, а символы кириллицы отображались бы некорректно (как \"����\" или подобные артефакты).\n\nЭто выражение обычно используется в контекстном менеджере with, чтобы гарантировать автоматическое закрытие файла после работы с ним."
  },
  {
    "front": "(MyApp) Что делает конструкция except Exception as ex в блоке try-except и почему она используется в функции загрузки карточек?",
    "back": "Конструкция except Exception as ex перехватывает любое исключение, которое может возникнуть в блоке try, и сохраняет его в переменную ex. В функции загрузки карточек это используется для:\n\nОбработки всех возможных ошибок - проблем с файлом, JSON-форматом, кодировкой, правами доступа и т.д.\n\nБезопасного логирования - записывает информацию об ошибке для отладки\n\nГрациозного восстановления - возвращает пустой список вместо аварийного завершения программы"
  },
  {
    "front": "(MyApp) Что делает метод Logger.error() и как он используется для обработки ошибок в приложении с карточками?",
    "back": "Logger.error() - это метод для записи сообщений об ошибках в систему логирования. В приложении с карточками он используется следующим образом:\n\nЗаписывает ошибки в лог с уровнем серьезности \"ERROR\"\n\nСохраняет контекст ошибки - что произошло и при каких обстоятельствах\n\nНе прерывает работу приложения - ошибка фиксируется, но программа продолжает работать"
  }
]